import { useState, useCallback } from "react";const MAX_LOGS = 100;export function useLogging() {  const [logs, setLogs] = useState([]);  const addLog = useCallback(    (message, type = "info", logMethod, logId = null, isUpdate = false) => {      const timestamp = new Date().toLocaleTimeString();      setLogs((prev) => {        if (isUpdate && logId) {          return prev.map((log) =>            log.id === logId ? { ...log, message, timestamp } : log          );        }        const newLogs = [          ...prev,          {            message,            type,            timestamp,            method: logMethod,            id:              logId ||              `log_${Date.now().toString()}_${Math.random().toString(36).substring(2, 10)}`,          },        ];        return newLogs.slice(-MAX_LOGS);      });    },    []  );  const clearLogs = useCallback(() => {    setLogs([]);  }, []);  return {    logs,    addLog,    clearLogs,  };}